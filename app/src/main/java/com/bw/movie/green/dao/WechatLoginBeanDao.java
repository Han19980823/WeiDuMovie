package com.bw.movie.green.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.bw.movie.green.bean.WechatLoginBean;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "WECHAT_LOGIN_BEAN".
*/
public class WechatLoginBeanDao extends AbstractDao<WechatLoginBean, Long> {

    public static final String TABLENAME = "WECHAT_LOGIN_BEAN";

    /**
     * Properties of entity WechatLoginBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property NickName = new Property(1, String.class, "nickName", false, "NICK_NAME");
        public final static Property Phone = new Property(2, String.class, "phone", false, "PHONE");
        public final static Property Birthday = new Property(3, String.class, "birthday", false, "BIRTHDAY");
        public final static Property Sex = new Property(4, String.class, "sex", false, "SEX");
        public final static Property LastLoginTime = new Property(5, String.class, "lastLoginTime", false, "LAST_LOGIN_TIME");
        public final static Property HeadPic = new Property(6, String.class, "headPic", false, "HEAD_PIC");
    }


    public WechatLoginBeanDao(DaoConfig config) {
        super(config);
    }
    
    public WechatLoginBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"WECHAT_LOGIN_BEAN\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"NICK_NAME\" TEXT," + // 1: nickName
                "\"PHONE\" TEXT," + // 2: phone
                "\"BIRTHDAY\" TEXT," + // 3: birthday
                "\"SEX\" TEXT," + // 4: sex
                "\"LAST_LOGIN_TIME\" TEXT," + // 5: lastLoginTime
                "\"HEAD_PIC\" TEXT);"); // 6: headPic
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"WECHAT_LOGIN_BEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, WechatLoginBean entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String nickName = entity.getNickName();
        if (nickName != null) {
            stmt.bindString(2, nickName);
        }
 
        String phone = entity.getPhone();
        if (phone != null) {
            stmt.bindString(3, phone);
        }
 
        String birthday = entity.getBirthday();
        if (birthday != null) {
            stmt.bindString(4, birthday);
        }
 
        String sex = entity.getSex();
        if (sex != null) {
            stmt.bindString(5, sex);
        }
 
        String lastLoginTime = entity.getLastLoginTime();
        if (lastLoginTime != null) {
            stmt.bindString(6, lastLoginTime);
        }
 
        String headPic = entity.getHeadPic();
        if (headPic != null) {
            stmt.bindString(7, headPic);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, WechatLoginBean entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String nickName = entity.getNickName();
        if (nickName != null) {
            stmt.bindString(2, nickName);
        }
 
        String phone = entity.getPhone();
        if (phone != null) {
            stmt.bindString(3, phone);
        }
 
        String birthday = entity.getBirthday();
        if (birthday != null) {
            stmt.bindString(4, birthday);
        }
 
        String sex = entity.getSex();
        if (sex != null) {
            stmt.bindString(5, sex);
        }
 
        String lastLoginTime = entity.getLastLoginTime();
        if (lastLoginTime != null) {
            stmt.bindString(6, lastLoginTime);
        }
 
        String headPic = entity.getHeadPic();
        if (headPic != null) {
            stmt.bindString(7, headPic);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public WechatLoginBean readEntity(Cursor cursor, int offset) {
        WechatLoginBean entity = new WechatLoginBean( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // nickName
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // phone
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // birthday
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // sex
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // lastLoginTime
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6) // headPic
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, WechatLoginBean entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setNickName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setPhone(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setBirthday(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setSex(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setLastLoginTime(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setHeadPic(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(WechatLoginBean entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(WechatLoginBean entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(WechatLoginBean entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
