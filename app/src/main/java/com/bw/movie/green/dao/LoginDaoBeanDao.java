package com.bw.movie.green.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.bw.movie.green.bean.LoginDaoBean;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "LOGIN_DAO_BEAN".
*/
public class LoginDaoBeanDao extends AbstractDao<LoginDaoBean, Long> {

    public static final String TABLENAME = "LOGIN_DAO_BEAN";

    /**
     * Properties of entity LoginDaoBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property MId = new Property(0, Long.class, "mId", true, "_id");
        public final static Property Email = new Property(1, String.class, "email", false, "EMAIL");
        public final static Property HeadPic = new Property(2, String.class, "headPic", false, "HEAD_PIC");
        public final static Property Id = new Property(3, int.class, "id", false, "ID");
        public final static Property LastLoginTime = new Property(4, long.class, "lastLoginTime", false, "LAST_LOGIN_TIME");
        public final static Property NickName = new Property(5, String.class, "nickName", false, "NICK_NAME");
        public final static Property Sex = new Property(6, int.class, "sex", false, "SEX");
    }


    public LoginDaoBeanDao(DaoConfig config) {
        super(config);
    }
    
    public LoginDaoBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"LOGIN_DAO_BEAN\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: mId
                "\"EMAIL\" TEXT," + // 1: email
                "\"HEAD_PIC\" TEXT," + // 2: headPic
                "\"ID\" INTEGER NOT NULL ," + // 3: id
                "\"LAST_LOGIN_TIME\" INTEGER NOT NULL ," + // 4: lastLoginTime
                "\"NICK_NAME\" TEXT," + // 5: nickName
                "\"SEX\" INTEGER NOT NULL );"); // 6: sex
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"LOGIN_DAO_BEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, LoginDaoBean entity) {
        stmt.clearBindings();
 
        Long mId = entity.getMId();
        if (mId != null) {
            stmt.bindLong(1, mId);
        }
 
        String email = entity.getEmail();
        if (email != null) {
            stmt.bindString(2, email);
        }
 
        String headPic = entity.getHeadPic();
        if (headPic != null) {
            stmt.bindString(3, headPic);
        }
        stmt.bindLong(4, entity.getId());
        stmt.bindLong(5, entity.getLastLoginTime());
 
        String nickName = entity.getNickName();
        if (nickName != null) {
            stmt.bindString(6, nickName);
        }
        stmt.bindLong(7, entity.getSex());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, LoginDaoBean entity) {
        stmt.clearBindings();
 
        Long mId = entity.getMId();
        if (mId != null) {
            stmt.bindLong(1, mId);
        }
 
        String email = entity.getEmail();
        if (email != null) {
            stmt.bindString(2, email);
        }
 
        String headPic = entity.getHeadPic();
        if (headPic != null) {
            stmt.bindString(3, headPic);
        }
        stmt.bindLong(4, entity.getId());
        stmt.bindLong(5, entity.getLastLoginTime());
 
        String nickName = entity.getNickName();
        if (nickName != null) {
            stmt.bindString(6, nickName);
        }
        stmt.bindLong(7, entity.getSex());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public LoginDaoBean readEntity(Cursor cursor, int offset) {
        LoginDaoBean entity = new LoginDaoBean( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // mId
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // email
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // headPic
            cursor.getInt(offset + 3), // id
            cursor.getLong(offset + 4), // lastLoginTime
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // nickName
            cursor.getInt(offset + 6) // sex
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, LoginDaoBean entity, int offset) {
        entity.setMId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setEmail(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setHeadPic(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setId(cursor.getInt(offset + 3));
        entity.setLastLoginTime(cursor.getLong(offset + 4));
        entity.setNickName(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setSex(cursor.getInt(offset + 6));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(LoginDaoBean entity, long rowId) {
        entity.setMId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(LoginDaoBean entity) {
        if(entity != null) {
            return entity.getMId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(LoginDaoBean entity) {
        return entity.getMId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
